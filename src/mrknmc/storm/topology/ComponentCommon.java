/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package mrknmc.storm.topology;

import java.util.HashMap;
import java.util.Map;

public class ComponentCommon implements java.io.Serializable, Cloneable {
  private Map<GlobalStreamId, Grouping> inputs;
  private Map<String, StreamInfo> streams;
  private int parallelismHint;
  private String jsonConf;

  public void putToInputs(GlobalStreamId key, Grouping val) {
    if (this.inputs == null) {
      this.inputs = new HashMap<GlobalStreamId,Grouping>();
    }
    this.inputs.put(key, val);
  }

  public ComponentCommon() {

  }

  /**
   * This serves as clone
   * TODO: StreamInfo needs clone
   */
  public ComponentCommon(ComponentCommon other) {
    if (other.getInputs() != null) {
      Map<GlobalStreamId, Grouping> __this__inputs = new HashMap<GlobalStreamId, Grouping>();
      for (Map.Entry<GlobalStreamId, Grouping> other_element : other.inputs.entrySet()) {

        GlobalStreamId other_element_key = other_element.getKey();
        Grouping other_element_value = other_element.getValue();

        GlobalStreamId __this__inputs_copy_key = new GlobalStreamId(other_element_key);

        Grouping __this__inputs_copy_value = new Grouping(other_element_value);

        __this__inputs.put(__this__inputs_copy_key, __this__inputs_copy_value);
      }
      this.inputs = __this__inputs;
    }
    if (other.getStreams() != null) {
      Map<String, StreamInfo> __this__streams = new HashMap<String, StreamInfo>();
      for (Map.Entry<String, StreamInfo> other_element : other.streams.entrySet()) {

        String other_element_key = other_element.getKey();
        StreamInfo other_element_value = other_element.getValue();

        String __this__streams_copy_key = other_element_key;

        StreamInfo __this__streams_copy_value = new StreamInfo(other_element_value);

        __this__streams.put(__this__streams_copy_key, __this__streams_copy_value);
      }
      this.streams = __this__streams;
    }
    this.parallelismHint = other.getParallelismHint();
    if (other.getJsonConf() != null) {
      this.jsonConf = other.getJsonConf();
    }
  }

  public Map<GlobalStreamId, Grouping> getInputs() {
    return inputs;
  }

  public void setInputs(Map<GlobalStreamId, Grouping> inputs) {
    this.inputs = inputs;
  }

  public Map<String, StreamInfo> getStreams() {
    return streams;
  }

  public void setStreams(Map<String, StreamInfo> streams) {
    this.streams = streams;
  }

  public int getParallelismHint() {
    return parallelismHint;
  }

  public void setParallelismHint(int parallelismHint) {
    this.parallelismHint = parallelismHint;
  }

  public String getJsonConf() {
    return jsonConf;
  }

  public void setJsonConf(String jsonConf) {
    this.jsonConf = jsonConf;
  }
}

