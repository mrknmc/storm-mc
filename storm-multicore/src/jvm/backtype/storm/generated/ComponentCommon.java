/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package backtype.storm.generated;

import com.google.common.collect.ImmutableMap;

import java.util.Map;

public class ComponentCommon implements java.io.Serializable, Cloneable {
  private final ImmutableMap<GlobalStreamId, Grouping> inputs;
  private final ImmutableMap<String, StreamInfo> streams;
  private final ImmutableMap<String, Object> conf;
  private final Number parallelismHint;

  public ComponentCommon(Map<GlobalStreamId, Grouping> inputs,
                         Map<String, StreamInfo> streams,
                         Number parallelismHint,
                         Map<String, Object> conf) {
    this.inputs = ImmutableMap.copyOf(inputs);
    this.streams = ImmutableMap.copyOf(streams);
    this.conf = ImmutableMap.copyOf(conf);
    this.parallelismHint = parallelismHint;
  }

  public Map<GlobalStreamId, Grouping> getInputs() {
    return inputs;
  }

  public Map<String, StreamInfo> getStreams() {
    return streams;
  }

  public Number getParallelismHint() {
    return parallelismHint;
  }

  public Map getConf() {
    return conf;
  }

}

